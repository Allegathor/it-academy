{"version":3,"sources":["../scripts/calc.js"],"names":[],"mappingsfile":"e5e5c05ab04ae7804c41b199bdb1c9c4.map","sourcesContent":["var input = document.getElementById('exp-input');\nvar output = document.getElementById('exp-result');\n\nvar getTokens = function(str) {\n\tvar arr;\n\tvar s = str.replace(/[^|.+-/*()0-9.]/g, '');\n\ts = s.replace(/\\d+[.]?\\d?|[+-/*()]/g, '$&|');\n\n\tarr = s.split('|');\n\tarr.pop();\n\treturn arr;\n}\n\nvar calc = function(tokens) {\n\tvar operators = {\n\t\t'+': function(a, b){ return a + b },\n\n\t\t'-': function(a, b){ return a - b},\n\n\t\t'*': function(a, b){ return a * b },\n\n\t\t'/': function(a, b){ return a / b}\n\t};\n\n\tvar tsStack = [];\n\tvar oq = [];\n\tvar t;\n\n\tfor (var i = 0; i < tokens.length; i++) {\n\t\tt = tokens[i];\n\n\t\tif (!isNaN(t)) {\n\t\t\toq.push(parseFloat(t));\n\n\t\t} else if (t in operators) {\n\n\t\t\twhile((t === '+' || t === '-') && (tsStack[tsStack.length - 1] === '/' || tsStack[tsStack.length - 1] === '*') ) {\n\t\t\t\toq.push(tsStack.pop());\n\n\t\t\t}\n\n\t\t\ttsStack.push(t);\n\n\t\t} else if (t === '(') {\n\t\t\ttsStack.push(t);\n\n\t\t} else if (t === ')') {\n\t\t\twhile(tsStack[tsStack.length - 1] !== '(') {\n\t\t\t\toq.push(tsStack.pop());\n\t\t\t}\n\n\t\t\ttsStack.pop();\n\t\t}\n\t}\n\n\twhile(tsStack.length) {\n\t\toq.push(tsStack.pop());\n\t}\n\n\tvar stack = [];\n\tvar el;\n\tvar opd1;\n\tvar opd2;\n\tvar val;\n\n\tfor(var n = 0; n < oq.length; n++) {\n\t\tel = oq[n];\n\n\t\tif(!isNaN(el)) {\n\t\t\tstack.push(el);\n\n\t\t} else if (el in operators) {\n\t\t\topd1 = stack.pop();\n\t\t\topd2 = stack.pop();\n\n\t\t\tval = operators[el](opd2, opd1);\n\t\t\tstack.push(val);\n\t\t}\n\t}\n\n\treturn stack[0];\n}\n\n\ninput.addEventListener('change', function(evt) {\n\toutput.textContent = calc(getTokens(input.value));\n})\n"]}