{"version":3,"sources":["../scripts/word_ladder.js"],"names":["Graph","vertices","GraphNode","val","edges","prototype","addVertex","addVertices","values","i","length","removeVertex","key","getVertex","addEdge","start","end","removeEdge","getEdge","getNeighbors","t1","buildGraph","words","dict","wordsGraph","word","bucket","n","chars","split","splice","join","push","b","word1","j","word2","bfsTree","g","preds","visited","verticesQueue","currentVert","shift","nbr","normalizeWords","wordUp","normalized","map","toLowerCase","buildLadder","graph","searchTree","unshift","console","log"],"mappings":"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","file":"70b606d5534882d7104464c23e952cc2.map","sourcesContent":["/* Graph type */\n\nvar Graph = function() {\n\tthis.vertices = {};\n}\n\nvar GraphNode = function(val) {\n\tthis.val = val;\n\tthis.edges = {};\n}\n\nGraph.prototype.addVertex = function(val) {\n\tif(!this.vertices[val]) {\n\t\tthis.vertices[val] = new GraphNode(val);\n\t}\n}\n\nGraph.prototype.addVertices = function(values) {\n\tfor(var i = 0; i < values.length; i++) {\n\t\tif(!this.vertices[values[i]]) {\n\t\t\tthis.vertices[values[i]] = new GraphNode(values[i]);\n\t\t}\n\t}\n}\n\nGraph.prototype.removeVertex = function(val) {\n\tif(this.vertices[val]) {\n\t\tdelete this.vertices[val];\n\n\t\tfor (key in this.vertices) {\n\t\t\tif (this.vertices[key].edges[val]) {\n\t\t\t\tdelete this.vertices[key].edges[val];\n\t\t\t}\n\t\t}\n\n\t}\n}\n\nGraph.prototype.getVertex = function(val) {\n\treturn this.vertices[val];\n}\n\nGraph.prototype.addEdge = function(start, end) {\n\tif(this.vertices[start] && this.vertices[end]) {\n\t\tthis.vertices[start].edges[end] = true;\n\t\tthis.vertices[end].edges[start] = true;\n\t}\n}\n\nGraph.prototype.removeEdge = function(start, end) {\n\tif(this.vertices[start] && this.vertices[end]) {\n\n\t\tif(this.vertices[start].edges[end]) {\n\t\t\tdelete this.vertices[start].edges[end];\n\t\t}\n\n\t}\n}\n\nGraph.prototype.getEdge = function(start, end) {\n\treturn this.vertices[start].edges[end] || null;\n}\n\nGraph.prototype.getNeighbors = function(val) {\n\treturn this.vertices[val] ? this.vertices[val].edges : null;\n}\n\nvar t1 = ['ТАРА','ЛИПА','ТУРА','ЛУЖА','ПАРК','ЛОЖЬ','ЛУПА','ПЛОТ','МУРА','ПАУК','ПАУТ','ПЛУТ','ЛОЖА','СЛОТ','ПАРА','МУХА','СЛОН','ЛИСА','ЛОСЬ'];\n\n/**\n * Builds a graph based on an array of words\n * @param  {String[]} words Function must accept an array of strings for further work\n * @return {Object}      Return an undirected graph\n */\nvar buildGraph = function(words) {\n\tvar dict = {};\n\tvar wordsGraph = new Graph();\n\twordsGraph.addVertices(words);\n\n\tvar word;\n\tvar bucket;\n\n\tfor(var i = 0; i < words.length; i++) {\n\t\tvar word = words[i];\n\n\t\tfor(var n = 0; n < word.length; n++) {\n\t\t\tvar chars = word.split('');\n\t\t\tchars.splice(n, 1, '_');\n\t\t\tvar bucket = chars.join('');\n\n\t\t\tif(bucket in dict) {\n\t\t\t\tdict[bucket].push(word);\n\t\t\t} else {\n\t\t\t\tdict[bucket] = [word];\n\t\t\t}\n\t\t}\n\n\t}\n\n\tfor(var b in dict) {\n\t\tfor(var i = 0; i < b.length - 1; i++) {\n\t\t\tif(b.length > 1) {\n\t\t\t\tvar word1 = dict[b][i];\n\n\t\t\t\tfor(var j = i + 1; j < b.length; j++) {\n\t\t\t\tvar word2 = dict[b][j];\n\t\t\t\t\tif(word1 !== word2)\n\t\t\t\t\t\twordsGraph.addEdge(word1, word2);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wordsGraph;\n}\n\n/**\n * Creates a bfsTree-like object\n *\n * @param {Object} g     Must accept a graph\n * @param {String} start Starting point(word)\n *\n * @return {Object} Object that contains nodes and their predecessors\n */\nvar bfsTree = function(g, start) {\n\tvar preds = {}; // Key\n\tvar visited = {};\n\tpreds[start] = null;\n\tvar verticesQueue = [];\n\tverticesQueue.push(start);\n\n\twhile(verticesQueue.length > 0) {\n\t\tvar currentVert = verticesQueue.shift();\n\n\t\tfor(var nbr in g.getNeighbors(currentVert)) {\n\t\t\tif( !visited[nbr] ) {\n\t\t\t\tpreds[nbr] = currentVert;\n\t\t\t\tverticesQueue.push(nbr);\n\t\t\t\tvisited[nbr] = 'f'; // would be visited in future\n\t\t\t}\n\t\t}\n\n\t\tvisited[currentVert] = 'v'; // visited\n\t}\n\treturn preds;\n}\n\nvar normalizeWords = function(words) {\n\tvar wordUp;\n\tvar normalized = words.map(function(word, i) {\n\t\twordUp = word.toLowerCase();\n\t\treturn wordUp;\n\t});\n\n\treturn normalized;\n}\n\n\n/**\n * Creates a word ladder\n *\n * @param {String[]} dict  Dictionary of words\n * @param {String} start\tStarting word\n * @param {String} end   Ending word\n *\n * @return {String} Ladder is the shortest path from the start to the end of the tree\n */\nvar buildLadder = function(dict, start, end) {\n\tvar words = normalizeWords(dict);\n\tvar graph = buildGraph(words);\n\tvar searchTree = bfsTree(graph, start);\n\tvar word = end;\n\tvar words = [];\n\n\tdo {\n\n\t\tif(word === start){\n\t\t\twords.unshift(word);\n\t\t\tbreak;\n\t\t}\n\t\twords.unshift(word);\n\t\tword = searchTree[word];\n\n\t} while(word !== null)\n\n\treturn words.join('-');\n}\n\nconsole.log(buildLadder(t1, 'муха', 'слон'));\nconsole.log(buildLadder(t1, 'лиса', 'лось'));\n"]}